version: '3.8'

services:
  # Database
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_MULTIPLE_DATABASES: user_db,room_db,reservation_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
    networks:
      - reservation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    command: ["postgres", "-c", "max_connections=200"]

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2181:2181"
    networks:
      - reservation-network
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc localhost 2181"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_HEAP_OPTS: "-Xmx512M -Xms256M"
    networks:
      - reservation-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server kafka:29092"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s

  # User Service
  user-service:
    build: ./user-service
    container_name: user-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8081
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_LIQUIBASE_ENABLED: false
    ports:
      - "8081:8081"
    networks:
      - reservation-network

  # Room Service
  room-service:
    build: ./room-service
    container_name: room-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/room_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8082
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_LIQUIBASE_ENABLED: false
    ports:
      - "8082:8082"
    networks:
      - reservation-network

  # Reservation Service
  reservation-service:
    build: ./reservation-service
    container_name: reservation-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/reservation_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVER_PORT: 8083
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_LIQUIBASE_ENABLED: false
    ports:
      - "8083:8083"
    networks:
      - reservation-network

  # API Gateway
  api-gateway:
    build: ./api-gateway-service/api-gateway
    container_name: api-gateway
    depends_on:
      - user-service
      - room-service
      - reservation-service
    ports:
      - "8080:8080"
    networks:
      - reservation-network

# Web Service has been removed as API Gateway provides the UI at port 8080

volumes:
  postgres_data:

networks:
  reservation-network:
    driver: bridge 